Bioseqlib
=========

Victor E. Bazterra 
Center for High Performance Computing
University of Utah (2005)


Description
===========

       Bioseqlib is small library in C++ for bioinformatics applications developted at Center for High Performance Computing University of Utah. Originally, it was built as a part of a bigger project providing basics algorithms like memory management, sequence manipulation and dynamic programming. Since then, the library has grown little more including binary tree operations and some algorithms for calculating phylogenetic trees. I/O functions are done by seqio library, a C library designed to read biological sequences from different databases. A series of wrapper functions are used to access seqio capabilities from bioseqlib.

       The structure of this library will allow to be a natural container for more complex implementations. It is organized to improve code portability and re-usability. Another feature is that it is well documented using doxygen as documentation generator.


Bioseqlib features
==================

    * Basic containers to represent biological sequences and any of their possible alignments
    * Amino acid alphabet including the PAM and BLOSUM score matrices.
    * A general binary tree definition and operation.
    * Algorithms to create a rooted or unrooted trees given the distances between vertices.
    * C++ adaptation of seqio library.
    * Algorithms to calculate the sequence metrics and/or distances.
    * Linear and quadratic space algorithms for optimal global alignment between two sequences using affinitive gaps.


Installation
============

It is necessary to define BIOSEQLIBROOT that should be ponting to the root directory where the library is install.

After that just type 'make' in the BIOSEQLIBROOT directory.

Example:

~> mkdir bioseqlib

~> cp bioseqlib-x.x.tar.gz bioseqlib/

~> cd bioseqlib 

bioseqlib> export BIOSEQLIBROOT=$PWD (for bash)
           setenv BIOSEQLIBROOT PWD (for tcsh)
   
bioseqlib> make


Notes
=====

For the score evaluation there are three options for treating initial and finial gaps:

1) Penalization of both creation and extension for initial and final gaps.
2) Penalization of only extension for initial and final gaps.
3) No penalization whatsoever of initial and final gaps (Nancy's option).

It is possible to implement option 2 and 3 with the actual code. By default option 3 (Nancy's option) is implemented and by uncommented two lines of the file $bioseqlibROOT/source/score/aligmen_score.C the option 2 is implemented.

All the two sequence aligment algorithms are built using option 1, meaning that they find the best score defined using option 1. This is the most traditional approach for two sequences. It is possible to match the different options but is not clear what is the best option because the score functions evaluate not only aligments of two sequences by n-sequences too.


Validation
==========

There are several validations examples, but the most importants are defined by the score4 and score5 examples ($bioseqlib/examples). These evaluates the score between to aligments generated by msaga program. The results from msaga are in nancy1 and nancy2 text files. Executing score4 and score5 should give the same results. 

